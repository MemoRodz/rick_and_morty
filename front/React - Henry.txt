React - Henry

Crear aplicación React con Redux

npx create-react-app repaso --template redux

Instalar React-Router-Dom en una aplicación nueva
npm i react-router-dom

Instalación de Nodemon a nivel global
npm install -g nodemon

Para iniciar un proyecto y crear el package.json
  npm init
y después 
  npm install

const  generateRandomString = (num) => {
        const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        console.log(characters.length);
        let result1= Math.random().toString(36).substring(0,num);       

        return result1;
    }

let  generateRandomString = (num) => {
        
        let result1= Math.floor(Math.random()).toString(36).substring(0,num);

        return result1;
    }

console.log(generateRandomString(7));

const process = require("process");
const commands = require("./commands/index.js");

function bash() {
const done = function(data){
  process.stdout.write(data);
  process.stdout.write('\nprompt > ');
}

  process.stdout.write('prompt >');

  process.stdin.on('data', data => {
    let args = data.toString().trim().split(' ');
    let cmd = args.shift();
    if(commands[cmd]){
      commands[cmd(args, done)];
    } else{
      done('command not found: %s', cmd);
    }
    process.stdout.write('\nprompt > ');
  });
}

function print(output) {
  process.stdout.write(output);
  process.stdout.write('\nprompt > ');
}

const fs = require("fs");
const utils = require("../utils/request");
const process = require("process");

function pwd(args, done) {
    done(process.cwd());
    process.stdout.write('\n prompt > ');
}

function date(args, print) {
    print(Date());
    process.stdout.write('\n prompt > ');
}

function echo(args, done) {
    done(args.join(""));
    process.stdout.write('\n prompt > ');
}

function ls(args, done) {
    fs.readdir('.', function(err, data){
        if(err) throw err;
        done(data.join("\n"));
        process.stdout.write('\n prompt > ');
    });
}

function cat(args, done) {
    fs.readFile(args[0], 'utf8', function(err, data){
        if(err) throw err;
        done(data);
        process.stdout.write('\n prompt > ');
    });
}

function head() {}

function tail() {}

function curl() {}

module.exports = { pwd, date, echo, ls, cat, head, tail, curl };


<Route path='/home' element={} />
<Cards characters={characters} onClose={onClose} />


            <FutbolistaCard
               id={futbolistas.id}
               name={futbolistas.name}
               pais={futbolistas.pais}
               imagen={futbolistas.imagen}
            />

            <FutbolistaCard
            id={futbolistas.id}
            name={futbolistas.name}
            pais={futbolistas.pais}
            imagen={futbolistas.imagen}
            />

            {futbolistas && futbolistas.map((ft) => {
               return {
                  <FutbolistaCard
                  id={futbolistas.id}
                  name={futbolistas.name}
                  pais={futbolistas.pais}
                  imagen={futbolistas.imagen}
                  />
               }
            })}

                  const [error, setError] = React.useState("");

      const [jugador, setJugador]= React.useState({
            name: '',
            pais: '',
            posición: '',
            descripción: '',
            numeroCamiseta: 0,
            imagen: '',
            nacimiento: ''
      });

      function handleInputChange(e) {
            setJugador({
                  ...jugador,
                  [e.target.name]: e.target.value
            })
      }


       onChange={handleInputChange(e)}

             function validate(inputs){
            if(!inputs.name.length > 30){
                  setError("Nombre u Pais demasiado largo");
            } else if(inputs.pais.length > 30){
                  setError("Nombre u Pais demasiado largo");
            } else if(inputs.numeroCamiseta < 0){
                  setError("El numero de camiseta tiene que ser mayor a 0");
            }
      };

validate(e).length? (e) => handleSubmit(e): null

export const getAllFutbolistas = () => {
    return async function (dispatch) {
        try {
            let response = await axios.get('http://localhost:3001/futbolistas');
            return dispatch(
                {
                    type:GET_ALL_FUTBOLISTAS,
                    payload:response.data
                }
            );
        } catch (error) {
            console.log(error);
        }
    };
};

Use el codigo que dio el profe en clase para hacer la petición creo que era el de React-redux cuando hacian la "Store-Henry"
dentro de sus funciones 
export const getAllFutbolistas = () => {
return async function (dispatch) {
        try {
          let response = await axios.get("http://localhost:3001/futbolistas");
          return dispatch({
            type: GET_ALL_FUTBOLISTAS,
            payload: response.data,
          });
        } catch (error) {
          console.log(error);
        }
      };

Rick And Morty
Corte de video para nuevo repo
Modo de Corte: En partes según los códigos de tiempo
00:42:25-00:46:30  ==>HH:MM:ss-HH:MM:ss

git remote add origin https://github.com/MemoRodz/rick_and_morty.git

      <div>
        <Card
          name={Rick.name}
          species={Rick.species}
          gender={Rick.gender}
          image={Rick.image}
          onClose={() => window.alert('Emulamos que se cierra la card')}
        />
      </div>
      <hr />


            <div>
        <SearchBar
          onSearch={(characterID) => window.alert(characterID)}
        />
      </div>

      .card{
    border: 8px solid rgba(239,191,224,0.801);
    width: 22%;
}

img{
    width: 100%;
}

    border-radius: 8px;
    padding: 8px;
    margin: 2px;
    background-color: rgba(12, 165, 12, 0.252);

https://images.alphacoders.com/876/876589.jpg

background-color: buttonface;
color: buttontext;




export function Products({products}) {
   return (
      
   )
}
{
   return (
      <>
         <div className='productsBg'>
            <h1 className='productsTl'>HENRY MARKET</h1>

            <div className='productsList'>
               
            </div>
         </div>
      </>
   );
}

import { connect } from 'react-redux';
import React from 'react';
import './products.css';
//El componente Card lo exportamos haciendo destructuring para poder testearlo
import Card, { mapDispatchToProps } from '../Card/Card';
import { getStoreName } from '../../redux/actions/actions';

export function Products({ list, getStoreName, storeName }) {
   React.useEffect(() => {
      getStoreName()
   }, [])

   return (
      <div>
         <div className='productsBg'>
            <h1 className='productsTl'>{storeName}</h1>
            <div className='productsList'>
               {
                  list.map(product => {
                     return (
                        <Card
                           name={product.name}
                           price={product.price}
                           key={product.id} />
                     )
                  })
               }
            </div>
         </div>
      </div>
   );
};

export function mapStateToProps(state) {
   return {
      products: state.list,
      storeName: state.storeName
   };
};

export function mapDispatchToProps(dispatch) {
   return {
      getStoreName: () => { dispatch(getStoreName()) }
   }
};

export default connect(mapStateToProps, mapDispatchToProps)(Products);


import { connect } from 'react-redux';
import React from 'react';
import './products.css';
//El componente Card lo exportamos haciendo destructuring para poder testearlo
// import Card from '../Card/Card'

export function Products() {
   return (
      <>
         <div className='productsBg'>
            <h1 className='productsTl'>HENRY MARKET</h1>

            <div className='productsList'>
               {/* ¡Renderiza aquí todas tus cards! */}
            </div>
         </div>
      </>
   );
}

export function mapStateToProps() {}

export default connect(mapStateToProps, null)(Products);


import { connect } from 'react-redux';
import React from 'react';
import './products.css';
//El componente Card lo exportamos haciendo destructuring para poder testearlo
import Card from '../Card/Card'
import {getStoreName } from '../../redux/actions/actions'

export function Products(list, getStoreName, storeName) {
   React.useEffect(()=>{
      getStoreName()
   }, [])

   return (
      <div>
         <div className='productsBg'>
            <h1 className='productsTl'>{storeName}</h1>

            <div className='productsList'>
               {
                  list.map(product=>{
                     return(
                        <Card name={product.name} price={product.price} key={product.id} />
                     )
                  })
               }
            </div>
         </div>
      </div>
   );
}

export function mapStateToProps(state) {
   return{
      list: state.list,
      storeName: state.storeName
   }
}

export function mapDispatchToProps(dispatch){
   return{
      getStoreName:()=>{dispatch(getStoreName())}
   }
}

export default connect(mapStateToProps, mapDispatchToProps)(Products);


               list.map((product, index) => {
                  return <Card name={product.name} price={product.price} id={product.id} key={index} />
               }